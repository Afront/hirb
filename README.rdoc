== Description

Hirb is currently a mini view framework for console applications designed with irb in mind. 
It provides one method which enhances irb's echo mode by letting you associate a custom view with
a class. It encourages reusing views by letting you package them in classes and associate them with
any number of classes. Hirb comes with a table view which works out of box with
any Ruby classes, especially Rails' model classes.

== Install

Install the gem with:

    sudo gem install cldwalker-hirb -s http://gems.github.com

== Rails Example

Let's load and enable the view framework:
  bash> script/console
  Loading local environment (Rails 2.2.2)
  irb>> require 'hirb'
  => true
  irb>> Hirb::View.enable
  => nil

The default configuration provides table views for ActiveRecord::Base descendants.
If a class isn't configured, Hirb reverts to irb's default echo mode.
  irb>> Hirb::View.output_config
  => {"ActiveRecord::Base"=>{:class=>"Hirb::Views::ActiveRecord_Base", :ancestor=>true}}

  # Tag is a model class and descendant of ActiveRecord::Base
  irb>> Tag.last
  +-----+-------------------------+-------------+---------------+-----------+-----------+-------+
  | id  | created_at              | description | name          | namespace | predicate | value |
  +-----+-------------------------+-------------+---------------+-----------+-----------+-------+
  | 907 | 2009-03-06 21:10:41 UTC |             | gem:tags=yaml | gem       | tags      | yaml  |
  +-----+-------------------------+-------------+---------------+-----------+-----------+-------+
  1 row in set

  irb>> 'plain ol irb'
  => 'plain ol irb'
  irb>> :blah
  => :blah

From above you can see there were no views configured for a String or a Symbol so Hirb defaulted to
irb's echo mode. Also note that Tag was able to inherit its view from the ActiveRecord::Base config
because it had an :ancestor option.

Now that you understand that Hirb displays views based on an object's class,
you may appreciate it also detects configured classes in an array:

  irb>> Tag.all :limit=>3, :order=>"id DESC"
  +-----+-------------------------+-------------+-------------------+-----------+-----------+----------+
  | id  | created_at              | description | name              | namespace | predicate | value    |
  +-----+-------------------------+-------------+-------------------+-----------+-----------+----------+
  | 907 | 2009-03-06 21:10:41 UTC |             | gem:tags=yaml     | gem       | tags      | yaml     |
  | 906 | 2009-03-06 08:47:04 UTC |             | gem:tags=nomonkey | gem       | tags      | nomonkey |
  | 905 | 2009-03-04 00:30:10 UTC |             | article:tags=ruby | article   | tags      | ruby     |
  +-----+-------------------------+-------------+-------------------+-----------+-----------+----------+
  3 rows in set

At any time you can disable Hirb if you really like irb's lovely echo mode:
  irb>> Hirb::View.disable
  => nil
  irb>> Tag.all :limit=>3, :order=>"id DESC"
  => [#<Tag id: 907, name: "gem:tags=yaml", description: nil, created_at: "2009-03-06 21:10:41", namespace: "gem", predicate: "tags", value: "yaml">, #<Tag id: 906, name: "gem:tags=nomonkey",
  description: nil, created_at: "2009-03-06 08:47:04", namespace: "gem", predicate: "tags", value: "nomonkey">, #<Tag id: 905, name: "article:tags=ruby", description: nil, created_at: "2009-03-04
  00:30:10", namespace: "article", predicate: "tags", value: "ruby">]

== Views: Anytime, Anywhere
While preconfigured tables are great for database records, sometimes you'll just want to create tables/views for any object:
  
  #These examples don't need to have Hirb::View enabled.
  irb>>Hirb::View.disable

  # Imports table() and view()
  irb>>extend Hirb::Console
  =>main

  # Create a table of Dates comparing them with different formats.
  irb>> table [Date.today, Date.today.next_month], :fields=>[:to_s, :ld, :ajd, :amjd, :asctime]
  +------------+--------+-----------+-------+--------------------------+
  | to_s       | ld     | ajd       | amjd  | asctime                  |
  +------------+--------+-----------+-------+--------------------------+
  | 2009-03-11 | 155742 | 4909803/2 | 54901 | Wed Mar 11 00:00:00 2009 |
  | 2009-04-11 | 155773 | 4909865/2 | 54932 | Sat Apr 11 00:00:00 2009 |
  +------------+--------+-----------+-------+--------------------------+
  2 rows in set

  # Same table as the previous method. However view() will be able to call any view created.
  irb>> view [Date.today, Date.today.next_month], :class=>Hirb::Helpers::ObjectTable, :fields=>[:to_s, :ld, :ajd, :amjd, :asctime]

If these console methods weren't convenient enough, try:

  # Import view methods available to all objects.
  irb>> require 'hirb/import_object'
  =>true
  # Same table as above examples.
  irb>> [Date.today, Date.today.next_month].view :class=>Hirb::Helpers::ObjectTable, :fields=>[:to_s, :ld, :ajd, :amjd, :asctime]

  TODO: local block + render_method

== Create and Configure Views
In a normal irb session, Hirb doesn't come with any preconfigured views.
Let's create a view and configure it in different ways to be a Hash's default view.

  irb>> require 'hirb'
  =>true

  irb>> require 'yaml'
  =>true
  # Method which converts anything to yaml
  irb>> def yaml(obj); obj.to_yaml; end
  =>nil

=== Configure As View Method
  # Let's associate this method with Hash objects
  irb>>Hirb::View.output_config = {"Hash"=>{:method=>:yaml}}
  =>{"Hash"=>{:method=>:yaml}}
  irb>>Hash::View.reload_config
  =>true

  # Hashes now appear as yaml
  irb>>{:a=>1, :b=>{:c=>3}}
  --
  :a: 1
  :b: 
    :c: 3
  => true

=== Configure As View Class, Autoloaded View Class
TODO
=== Configure With Config File, block, local block
TODO


== Todo
* Create tree views
